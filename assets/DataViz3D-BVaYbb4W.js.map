{"version":3,"file":"DataViz3D-BVaYbb4W.js","sources":["../../src/components/DataViz3D.tsx"],"sourcesContent":["\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls, Text, Float, Sparkles, Environment as DreiEnvironment, useTexture } from '@react-three/drei';\nimport * as THREE from 'three';\n\ninterface NodeProps {\n  position: [number, number, number];\n  size?: number;\n  color?: string;\n  label?: string;\n  pulse?: boolean;\n  onClick?: () => void;\n}\n\nconst DataNode: React.FC<NodeProps> = ({ \n  position, \n  size = 0.3, \n  color = '#1EAEDB', \n  label, \n  pulse = false,\n  onClick \n}) => {\n  const ref = useRef<THREE.Mesh>(null);\n  const [hovered, setHovered] = useState(false);\n  const [clicked, setClicked] = useState(false);\n  \n  useFrame((state) => {\n    if (ref.current && pulse) {\n      const t = state.clock.getElapsedTime();\n      ref.current.scale.x = 0.85 + 0.15 * Math.sin(t * 2);\n      ref.current.scale.y = 0.85 + 0.15 * Math.sin(t * 2 + 0.3);\n      ref.current.scale.z = 0.85 + 0.15 * Math.sin(t * 2 + 0.6);\n      \n      ref.current.rotation.x = Math.sin(t * 0.5) * 0.2;\n      ref.current.rotation.z = Math.sin(t * 0.3) * 0.2;\n    }\n  });\n  \n  const handleClick = () => {\n    setClicked(!clicked);\n    if (onClick) onClick();\n  };\n  \n  return (\n    <Float \n      speed={pulse ? 2 : 1} \n      rotationIntensity={0.2} \n      floatIntensity={0.3}\n      position={position}\n    >\n      <mesh\n        ref={ref}\n        onPointerOver={() => setHovered(true)}\n        onPointerOut={() => setHovered(false)}\n        onClick={handleClick}\n        scale={clicked ? 1.2 : 1}\n      >\n        <sphereGeometry args={[size, 32, 32]} />\n        <meshStandardMaterial \n          color={hovered ? '#ffffff' : color} \n          emissive={color}\n          emissiveIntensity={hovered ? 2.5 : clicked ? 1.8 : 1}\n          roughness={0.2}\n          metalness={0.8}\n        />\n        {hovered && (\n          <Sparkles \n            count={20} \n            scale={[2, 2, 2]} \n            size={0.4} \n            speed={0.3} \n            color={color} \n          />\n        )}\n      </mesh>\n      {label && (\n        <Text\n          position={[0, size + 0.1, 0]}\n          fontSize={0.1}\n          color={hovered ? '#ffffff' : '#cccccc'}\n          anchorX=\"center\"\n          anchorY=\"bottom\"\n          renderOrder={2}\n          outlineWidth={0.008}\n          outlineColor=\"#000000\"\n          maxWidth={1}\n        >\n          {label}\n        </Text>\n      )}\n    </Float>\n  );\n};\n\ninterface EdgeProps {\n  start: [number, number, number];\n  end: [number, number, number];\n  color?: string;\n  width?: number;\n  speed?: number;\n}\n\nconst DataEdge: React.FC<EdgeProps> = ({ \n  start, \n  end, \n  color = '#1EAEDB',\n  width = 0.05,\n  speed = 1\n}) => {\n  const points = [\n    new THREE.Vector3(...start),\n    new THREE.Vector3(...end)\n  ];\n  \n  // Create a more visible curve between points\n  const midPoint = new THREE.Vector3().addVectors(\n    new THREE.Vector3(...start),\n    new THREE.Vector3(...end)\n  ).multiplyScalar(0.5);\n  \n  // Push the midpoint out a bit more to increase visibility\n  midPoint.normalize().multiplyScalar(3.0 + Math.random() * 0.3);\n  \n  const curve = new THREE.QuadraticBezierCurve3(\n    new THREE.Vector3(...start),\n    midPoint,\n    new THREE.Vector3(...end)\n  );\n  \n  // Increase tube segments for smoother curves\n  const tubeGeometry = new THREE.TubeGeometry(curve, 30, width, 8, false);\n  \n  return (\n    <mesh geometry={tubeGeometry}>\n      <meshStandardMaterial\n        color={color}\n        transparent={true}\n        opacity={0.7}\n        emissive={color}\n        emissiveIntensity={0.5}\n      />\n    </mesh>\n  );\n};\n\n// Globe base component\nconst GlobeBase = () => {\n  const globeRef = useRef<THREE.Mesh>(null);\n  \n  useFrame(({ clock }) => {\n    if (globeRef.current) {\n      globeRef.current.rotation.y = clock.getElapsedTime() * 0.05;\n    }\n  });\n  \n  return (\n    <mesh ref={globeRef} position={[0, 0, 0]}>\n      <sphereGeometry args={[2.8, 64, 64]} />\n      <meshPhongMaterial \n        color=\"#070c20\" \n        transparent={true}\n        opacity={0.3}\n        emissive=\"#1a2b4a\"\n        emissiveIntensity={0.5}\n        wireframe={false}\n      />\n    </mesh>\n  );\n};\n\n// Custom OrbitControls wrapper to ensure it has access to camera\nconst ControlsWrapper = () => {\n  const { camera, gl } = useThree();\n  return (\n    <OrbitControls \n      args={[camera, gl.domElement]}\n      enableZoom={true}\n      enablePan={false}\n      autoRotate={false}\n      rotateSpeed={0.5}\n      zoomSpeed={0.8}\n      minDistance={4}\n      maxDistance={12}\n      minPolarAngle={Math.PI / 4}\n      maxPolarAngle={3 * Math.PI / 4}\n    />\n  );\n};\n\ninterface DataNetworkProps {\n  nodeCount?: number;\n  connections?: number;\n  autoRotate?: boolean;\n}\n\nconst DataNetwork: React.FC<DataNetworkProps> = ({ \n  nodeCount = 28,\n  connections = 45, // Increased for better connectivity\n  autoRotate = true\n}) => {\n  const groupRef = useRef<THREE.Group>(null);\n  const [activeNode, setActiveNode] = useState<number | null>(null);\n  \n  const nodes: NodeProps[] = [];\n  const skills = [\n    'SQL', 'Python', 'Spark', 'ETL', 'AWS', \n    'Hadoop', 'Kafka', 'Airflow', 'NoSQL', \n    'Tableau', 'ML', 'Data', 'dbt', 'Snowflake',\n    'Docker', 'Kubernetes', 'TensorFlow', 'PyTorch', \n    'React', 'TypeScript', 'NextJS', 'Supabase',\n    'Git', 'Jenkins', 'Terraform', 'MongoDB', 'Grafana',\n    'Prometheus'\n  ];\n  \n  // Place nodes on the globe surface with consistent spacing\n  for (let i = 0; i < nodeCount; i++) {\n    // Create a more even distribution of points on a sphere (Fibonacci sphere)\n    const phi = Math.acos(1 - 2 * (i + 0.5) / nodeCount);\n    const theta = Math.PI * (1 + Math.sqrt(5)) * (i + 0.5);\n    \n    // Use a fixed radius for the globe\n    const radius = 3;\n    \n    // Convert spherical to Cartesian coordinates\n    const x = radius * Math.sin(phi) * Math.cos(theta);\n    const y = radius * Math.sin(phi) * Math.sin(theta);\n    const z = radius * Math.cos(phi);\n    \n    const colors = ['#1EAEDB', '#8B5CF6', '#D946EF', '#F97316', '#10B981', '#EC4899', '#0EA5E9', '#F59E0B'];\n    const color = colors[Math.floor(Math.random() * colors.length)];\n    \n    nodes.push({\n      position: [x, y, z],\n      color,\n      size: 0.12 + Math.random() * 0.15,\n      label: skills[i % skills.length],\n      pulse: Math.random() > 0.5, // Reduced pulsing nodes\n      onClick: () => setActiveNode(activeNode === i ? null : i)\n    });\n  }\n  \n  const edges: EdgeProps[] = [];\n  \n  // First, ensure all nodes are connected in a continuous ring\n  for (let i = 0; i < nodes.length; i++) {\n    const nextIndex = (i + 1) % nodes.length;\n    \n    edges.push({\n      start: nodes[i].position,\n      end: nodes[nextIndex].position,\n      color: nodes[i].color,\n      width: 0.03 + Math.random() * 0.02, // Increased width for visibility\n      speed: 0.5 + Math.random() * 1.5\n    });\n  }\n  \n  // Define technology groups for more organized connections\n  const techGroups = {\n    'data': ['SQL', 'ETL', 'Data', 'dbt', 'Snowflake'],\n    'cloud': ['AWS', 'Docker', 'Kubernetes'],\n    'ml': ['ML', 'TensorFlow', 'PyTorch'],\n    'frontend': ['React', 'TypeScript', 'NextJS'],\n  };\n  \n  // Helper function to find nodes by label\n  const findNodeByLabel = (label: string) => {\n    return nodes.findIndex(node => node.label === label);\n  };\n  \n  // Connect all nodes within each technology group in a mesh pattern\n  Object.values(techGroups).forEach(group => {\n    for (let i = 0; i < group.length; i++) {\n      // Connect each node to every other node in the group for a dense mesh\n      for (let j = i + 1; j < group.length; j++) {\n        const startIdx = findNodeByLabel(group[i]);\n        const endIdx = findNodeByLabel(group[j]);\n        \n        if (startIdx !== -1 && endIdx !== -1) {\n          edges.push({\n            start: nodes[startIdx].position,\n            end: nodes[endIdx].position,\n            color: nodes[startIdx].color,\n            width: 0.025, // Thicker lines for group connections\n            speed: 0.5 + Math.random() * 1.5\n          });\n        }\n      }\n    }\n  });\n  \n  // Add strategic cross-discipline connections\n  const crossConnections = [\n    ['Python', 'ML'],\n    ['AWS', 'Docker'],\n    ['React', 'TypeScript'],\n    ['Data', 'SQL'],\n    ['TensorFlow', 'PyTorch'],\n    ['Hadoop', 'AWS'],\n    ['Kafka', 'Prometheus'],\n    ['Git', 'Jenkins'],\n    ['MongoDB', 'Supabase'],\n    ['NextJS', 'Supabase'],\n  ];\n  \n  crossConnections.forEach(([start, end]) => {\n    const startIdx = findNodeByLabel(start);\n    const endIdx = findNodeByLabel(end);\n    \n    if (startIdx !== -1 && endIdx !== -1) {\n      edges.push({\n        start: nodes[startIdx].position,\n        end: nodes[endIdx].position,\n        color: nodes[startIdx].color,\n        width: 0.02 + Math.random() * 0.01,\n        speed: 0.5 + Math.random() * 1.5\n      });\n    }\n  });\n  \n  // Add some random connections to ensure network is fully connected\n  // We'll connect each node to at least one other random node\n  for (let i = 0; i < nodes.length; i++) {\n    // Skip if node already has many connections\n    const existingConnections = edges.filter(\n      edge => \n        (edge.start === nodes[i].position || edge.end === nodes[i].position)\n    );\n    \n    if (existingConnections.length < 3) {\n      let targetIdx = Math.floor(Math.random() * nodes.length);\n      // Avoid self-connections and close nodes\n      while (targetIdx === i || Math.abs(targetIdx - i) < 3) {\n        targetIdx = Math.floor(Math.random() * nodes.length);\n      }\n      \n      edges.push({\n        start: nodes[i].position,\n        end: nodes[targetIdx].position,\n        color: nodes[i].color,\n        width: 0.02,\n        speed: 0.5 + Math.random() * 1.5\n      });\n    }\n  }\n  \n  useFrame((state) => {\n    if (groupRef.current && autoRotate) {\n      groupRef.current.rotation.y = state.clock.getElapsedTime() * 0.05;\n      \n      // Add a slight tilt animation\n      groupRef.current.rotation.x = Math.sin(state.clock.getElapsedTime() * 0.1) * 0.05;\n      groupRef.current.rotation.z = Math.sin(state.clock.getElapsedTime() * 0.08) * 0.03;\n    }\n  });\n  \n  return (\n    <group ref={groupRef}>\n      <GlobeBase />\n      \n      {/* Create atmospheric glow */}\n      <mesh>\n        <sphereGeometry args={[3.2, 32, 32]} />\n        <meshPhongMaterial \n          color=\"#4a88e5\"\n          transparent={true}\n          opacity={0.03}\n          side={THREE.BackSide}\n        />\n      </mesh>\n      \n      {/* Render edges first so they appear behind nodes */}\n      {edges.map((edge, idx) => (\n        <DataEdge key={`edge-${idx}`} {...edge} />\n      ))}\n      \n      {/* Then render nodes on top */}\n      {nodes.map((node, idx) => (\n        <DataNode key={`node-${idx}`} {...node} />\n      ))}\n      \n      <Sparkles \n        count={200} \n        scale={[6, 6, 6]} \n        size={0.2} \n        speed={0.3} \n        color=\"#ffffff\" \n        opacity={0.3}\n      />\n    </group>\n  );\n};\n\nconst CustomEnvironment = () => {\n  return (\n    <>\n      <fog attach=\"fog\" args={['#000000', 5, 15]} />\n      <ambientLight intensity={0.3} />\n      <pointLight position={[10, 10, 10]} intensity={1.5} castShadow />\n      <pointLight position={[-10, -10, -10]} intensity={0.8} color=\"#8B5CF6\" />\n      <pointLight position={[5, -5, 5]} intensity={0.5} color=\"#F97316\" />\n      <DreiEnvironment preset=\"city\" background={false} />\n    </>\n  );\n};\n\nconst Fallback = () => (\n  <div className=\"w-full h-full flex items-center justify-center\">\n    <div className=\"text-white text-center\">\n      <div className=\"text-2xl mb-2\">Interactive Visualization</div>\n      <div className=\"text-sm opacity-70\">3D visualization could not be loaded</div>\n    </div>\n  </div>\n);\n\nconst DataViz3D: React.FC<{ className?: string }> = ({ className }) => {\n  const [hasError, setHasError] = useState(false);\n\n  if (hasError) {\n    return <Fallback />;\n  }\n\n  return (\n    <div className={`w-full h-full ${className || ''}`}>\n      <Canvas \n        camera={{ position: [0, 0, 8], fov: 45 }}\n        gl={{ \n          antialias: true,\n          powerPreference: 'high-performance',\n          alpha: true,\n          logarithmicDepthBuffer: true,\n        }}\n        onCreated={({ gl }) => {\n          gl.setClearColor(new THREE.Color('#000000'), 0);\n          gl.outputColorSpace = THREE.SRGBColorSpace;\n          gl.toneMapping = THREE.ACESFilmicToneMapping;\n          gl.toneMappingExposure = 1.2;\n        }}\n        onError={() => setHasError(true)}\n        shadows\n      >\n        <color attach=\"background\" args={['#000000']} />\n        <CustomEnvironment />\n        <React.Suspense fallback={null}>\n          <DataNetwork />\n          <ControlsWrapper />\n        </React.Suspense>\n      </Canvas>\n    </div>\n  );\n};\n\nexport default DataViz3D;\n"],"names":["DataNode","position","size","color","label","pulse","onClick","ref","useRef","hovered","setHovered","useState","clicked","setClicked","useFrame","state","t","handleClick","jsxs","Float","jsx","Sparkles","Text","DataEdge","start","end","width","speed","THREE","midPoint","curve","tubeGeometry","GlobeBase","globeRef","clock","ControlsWrapper","camera","gl","useThree","OrbitControls","DataNetwork","nodeCount","connections","autoRotate","groupRef","activeNode","setActiveNode","nodes","skills","i","phi","theta","radius","x","y","z","colors","edges","nextIndex","techGroups","findNodeByLabel","node","group","j","startIdx","endIdx","edge","targetIdx","idx","CustomEnvironment","Fragment","DreiEnvironment","Fallback","DataViz3D","className","hasError","setHasError","Canvas","React"],"mappings":"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"}